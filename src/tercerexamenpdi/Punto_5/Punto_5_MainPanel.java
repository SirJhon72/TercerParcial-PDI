/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tercerexamenpdi.Punto_5;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Fer
 */
public class Punto_5_MainPanel extends javax.swing.JPanel {

    public boolean respuesta = true;
    public boolean Eimagen1 = false;
    public boolean Eimagen2 = false;
    public boolean medida = false;
    
    int contador = 0;
    
    //final MessageDialog mes;
        
    //mes = new MessageDialog();
    
    JLabel label, Olabel, Flabel;
    JScrollPane scroll, Oscroll, Fscroll;
    
    BufferedImage imagen = null;
    BufferedImage imagen2 = null;
    BufferedImage imagen3 = null;
    File imagenSeleccionada, imagensel2, imagensel3;
    Color arreglo[][], arregloNoMod[][], arregloFin[][];
    double alfa=0, beta = 0;
    
    /**
     * Creates new form Punto_5_MainPanel
     */
    public Punto_5_MainPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        XmenosY = new javax.swing.JButton();
        YmenosXsobre2 = new javax.swing.JButton();
        XmenosYsobre2 = new javax.swing.JButton();

        jButton1.setText("Cargar Imagen 1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cargar Imagen 2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        XmenosY.setText("|X-Y|");
        XmenosY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                XmenosYActionPerformed(evt);
            }
        });

        YmenosXsobre2.setText("127+(Y-X)/2");
        YmenosXsobre2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YmenosXsobre2ActionPerformed(evt);
            }
        });

        XmenosYsobre2.setText("127+(X-Y)/2");
        XmenosYsobre2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                XmenosYsobre2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(465, 465, 465)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(571, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(XmenosY)
                .addGap(80, 80, 80)
                .addComponent(YmenosXsobre2)
                .addGap(79, 79, 79)
                .addComponent(XmenosYsobre2)
                .addGap(155, 155, 155))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(175, 175, 175)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 227, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(XmenosY)
                    .addComponent(YmenosXsobre2)
                    .addComponent(XmenosYsobre2))
                .addGap(22, 22, 22)
                .addComponent(jButton2)
                .addGap(158, 158, 158))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        double[] x = new double[256];
                if (contador == 1) {
                    JFileChooser Buscar = new JFileChooser();
                    FileNameExtensionFilter extension = new FileNameExtensionFilter("JPG &  BMP & PNG", "jpg", "bmp", "png");
                    Buscar.setFileFilter(extension);
                    int flag = Buscar.showOpenDialog(null);
                    //Comprobamos que pulse en aceptar
                    if (flag == JFileChooser.APPROVE_OPTION) {
                        try {
                            //Devuelve el fichero seleccionado
                            imagenSeleccionada = Buscar.getSelectedFile();
                            //Asignamos a la variable bmp la imagen leida
                            imagen = ImageIO.read(imagenSeleccionada);
                            imagen3 = ImageIO.read(imagenSeleccionada);
                            Eimagen1 = true;
                        } catch (IOException e) {

                        }
                        label.setIcon(new ImageIcon(imagen));
                        //Recorremos la imagen
                        //Se vacían los pixeles a un arreglo de Colores
                        arreglo = new Color[imagen.getHeight()][imagen.getWidth()];
                        for (int i = 0; i < imagen.getHeight(); i++) {
                            for (int j = 0; j < imagen.getWidth(); j++) {
                                arreglo[i][j] = new Color(imagen.getRGB(j, i));
                            }
                        }
                        for (int i = 0; i < 256; i++) {
                            x[i] = (double) i;
                        }
                    }
                } else {
                    contador = 1;
                    JFileChooser Buscar = new JFileChooser();
                    FileNameExtensionFilter extension = new FileNameExtensionFilter("JPG &  BMP & PNG", "jpg", "bmp", "png");
                    Buscar.setFileFilter(extension);
                    int flag = Buscar.showOpenDialog(null);
                    //Comprobamos que pulse en aceptar
                    if (flag == JFileChooser.APPROVE_OPTION) {
                        try {
                            //Devuelve el fichero seleccionado
                            imagenSeleccionada = Buscar.getSelectedFile();
                            //Asignamos a la variable bmp la imagen leida
                            imagen = ImageIO.read(imagenSeleccionada);
                            imagen3 = ImageIO.read(imagenSeleccionada);
                            Eimagen1 = true;
                        } catch (IOException e) {

                        }
                        label.setIcon(new ImageIcon(imagen));
                        //Recorremos la imagen
                        //Se vacían los pixeles a un arreglo de Colores
                        arreglo = new Color[imagen.getHeight()][imagen.getWidth()];
                        for (int i = 0; i < imagen.getHeight(); i++) {
                            for (int j = 0; j < imagen.getWidth(); j++) {
                                arreglo[i][j] = new Color(imagen.getRGB(j, i));
                            }
                        }
                        for (int i = 0; i < 256; i++) {
                            x[i] = (double) i;
                        }
                    }
                }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        double[] x = new double[256];
                if (contador == 1) {
                    JFileChooser Buscar = new JFileChooser();
                    FileNameExtensionFilter extension = new FileNameExtensionFilter("JPG &  BMP & PNG", "jpg", "bmp", "png");
                    Buscar.setFileFilter(extension);
                    int flag = Buscar.showOpenDialog(null);
                    //Comprobamos que pulse en aceptar
                    if (flag == JFileChooser.APPROVE_OPTION) {
                        try {
                            //Devuelve el fichero seleccionado
                            imagenSeleccionada = Buscar.getSelectedFile();
                            //Asignamos a la variable bmp la imagen leida
                            imagen2 = ImageIO.read(imagenSeleccionada);
                            Eimagen2 = true;
                        } catch (IOException e) {

                        }
                        Flabel.setIcon(new ImageIcon(imagen2));
                        //Recorremos la imagen
                        //Se vacían los pixeles a un arreglo de Colores
                        arregloNoMod = new Color[imagen2.getHeight()][imagen2.getWidth()];
                        for (int i = 0; i < imagen2.getHeight(); i++) {
                            for (int j = 0; j < imagen2.getWidth(); j++) {
                                arregloNoMod[i][j] = new Color(imagen2.getRGB(j, i));
                            }
                        }
                        for (int i = 0; i < 256; i++) {
                            x[i] = (double) i;
                        }
                    }
                } else {
                    contador = 1;
                    JFileChooser Buscar = new JFileChooser();
                    FileNameExtensionFilter extension = new FileNameExtensionFilter("JPG &  BMP & PNG", "jpg", "bmp", "png");
                    Buscar.setFileFilter(extension);
                    int flag = Buscar.showOpenDialog(null);
                    //Comprobamos que pulse en aceptar
                    if (flag == JFileChooser.APPROVE_OPTION) {
                        try {
                            //Devuelve el fichero seleccionado
                            imagenSeleccionada = Buscar.getSelectedFile();
                            //Asignamos a la variable bmp la imagen leida
                            imagen2 = ImageIO.read(imagenSeleccionada);
                            Eimagen2 = true;
                        } catch (IOException e) {

                        }
                        Flabel.setIcon(new ImageIcon(imagen2));
                        //Recorremos la imagen
                        //Se vacían los pixeles a un arreglo de Colores
                        arregloNoMod = new Color[imagen2.getHeight()][imagen2.getWidth()];
                        for (int i = 0; i < imagen2.getHeight(); i++) {
                            for (int j = 0; j < imagen2.getWidth(); j++) {
                                arregloNoMod[i][j] = new Color(imagen2.getRGB(j, i));
                            }
                        }
                        for (int i = 0; i < 256; i++) {
                            x[i] = (double) i;
                        }
                    }
                }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void XmenosYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_XmenosYActionPerformed
        int Rojo1, Rojo2, azul1, azul2, verde1, verde2;
        double Rojofin, verdefin, azulfin;
        
        if(Eimagen1==false){
            JOptionPane.showMessageDialog(null, "Error: No ha seleccionado la 'Imagen 1'", "Error!", JOptionPane.ERROR_MESSAGE);
        }else{
            if(Eimagen2==false){
                JOptionPane.showMessageDialog(null, "Error: No ha seleccionado la 'Imagen 2'", "Error!", JOptionPane.ERROR_MESSAGE);
            }else{
                if(Eimagen1==true&&Eimagen2==true){
                    for (int i = 0; i < imagen.getHeight(); i++) {
                        for (int j = 0; j < imagen.getWidth(); j++) {
                            Rojo1 = arreglo[i][j].getRed();
                            Rojo2 = arregloNoMod[i][j].getRed();
                            Rojofin = Math.abs(Rojo1-Rojo2);
                            azul1 = arreglo[i][j].getBlue();
                            azul2 = arregloNoMod[i][j].getBlue();
                            azulfin = Math.abs(azul1-azul2);
                            verde1 = arreglo[i][j].getGreen();
                            verde2 = arregloNoMod[i][j].getGreen();
                            verdefin = Math.abs(verde1-verde2);
                            Color col = new Color((int) Rojofin, (int) verdefin, (int) azulfin);
                            int rgb = col.getRGB();
                            imagen3.setRGB(j, i, rgb);
                        }
                    }
                    Olabel.setIcon(new ImageIcon(imagen3));
                }else{
                    if(Eimagen1==false||Eimagen2==false){
                        JOptionPane.showMessageDialog(null, "Error: Tiene que cargar ambas imagenes", "Error!", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
    }//GEN-LAST:event_XmenosYActionPerformed

    private void YmenosXsobre2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YmenosXsobre2ActionPerformed
        int Rojo1, Rojo2, azul1, azul2, verde1, verde2;
        double preR=0, preV=0, preA=0;
        double Rojofin, verdefin, azulfin;
        
        if(Eimagen1==false){
            JOptionPane.showMessageDialog(null, "Error: No ha seleccionado la 'Imagen 1'", "Error!", JOptionPane.ERROR_MESSAGE);
        }else{
            if(Eimagen2==false){
                JOptionPane.showMessageDialog(null, "Error: No ha seleccionado la 'Imagen 2'", "Error!", JOptionPane.ERROR_MESSAGE);
            }else{
                if(Eimagen1==true&&Eimagen2==true){
                    for (int i = 0; i < imagen.getHeight(); i++) {
                        for (int j = 0; j < imagen.getWidth(); j++) {
                            Rojo1 = arreglo[i][j].getRed();
                            Rojo2 = arregloNoMod[i][j].getRed();
                            preR=Rojo1-Rojo2;
                            if(preR<0)
                                preR=0;
                            if(preR>255)
                                preR=255;
                            Rojofin=127+preR/2;
                            azul1 = arreglo[i][j].getBlue();
                            azul2 = arregloNoMod[i][j].getBlue();
                            preA=azul1-azul2;
                            if(preA<0)
                                preA=0;
                            if(preA>255)
                                preA=255;
                            azulfin=127+preA/2;
                            verde1 = arreglo[i][j].getGreen();
                            verde2 = arregloNoMod[i][j].getGreen();
                            preV=verde1-verde2;
                            if(preV<0)
                                preV=0;
                            if(preV>255)
                                preV=255;
                            verdefin=127+preV/2;
                            Color col = new Color((int) Rojofin, (int) verdefin, (int) azulfin);
                            int rgb = col.getRGB();
                            imagen3.setRGB(j, i, rgb);
                        }
                    }
                    Olabel.setIcon(new ImageIcon(imagen3));
                }else{
                    if(Eimagen1==false||Eimagen2==false){
                        JOptionPane.showMessageDialog(null, "Error: Tiene que cargar ambas imagenes", "Error!", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
    }//GEN-LAST:event_YmenosXsobre2ActionPerformed

    private void XmenosYsobre2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_XmenosYsobre2ActionPerformed
        int Rojo1, Rojo2, azul1, azul2, verde1, verde2;
        double preR=0, preV=0, preA=0;
        double Rojofin, verdefin, azulfin;
        
        if(Eimagen1==false){
            JOptionPane.showMessageDialog(null, "Error: No ha seleccionado la 'Imagen 1'", "Error!", JOptionPane.ERROR_MESSAGE);
        }else{
            if(Eimagen2==false){
                JOptionPane.showMessageDialog(null, "Error: No ha seleccionado la 'Imagen 2'", "Error!", JOptionPane.ERROR_MESSAGE);
            }else{
                if(Eimagen1==true&&Eimagen2==true){
                    for (int i = 0; i < imagen.getHeight(); i++) {
                        for (int j = 0; j < imagen.getWidth(); j++) {
                            Rojo1 = arreglo[i][j].getRed();
                            Rojo2 = arregloNoMod[i][j].getRed();
                            preR=Rojo2-Rojo1;
                            if(preR<0)
                                preR=0;
                            if(preR>255)
                                preR=255;
                            Rojofin=127+preR/2;
                            azul1 = arreglo[i][j].getBlue();
                            azul2 = arregloNoMod[i][j].getBlue();
                            preA=azul2-azul1;
                            if(preA<0)
                                preA=0;
                            if(preA>255)
                                preA=255;
                            azulfin=127+preA/2;
                            verde1 = arreglo[i][j].getGreen();
                            verde2 = arregloNoMod[i][j].getGreen();
                            preV=verde2-verde1;
                            if(preV<0)
                                preV=0;
                            if(preV>255)
                                preV=255;
                            verdefin=127+preV/2;
                            Color col = new Color((int) Rojofin, (int) verdefin, (int) azulfin);
                            int rgb = col.getRGB();
                            imagen3.setRGB(j, i, rgb);
                        }
                    }
                    Olabel.setIcon(new ImageIcon(imagen3));
                }else{
                    if(Eimagen1==false||Eimagen2==false){
                        JOptionPane.showMessageDialog(null, "Error: Tiene que cargar ambas imagenes", "Error!", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
    }//GEN-LAST:event_XmenosYsobre2ActionPerformed

    public void Todo (){
        //Imagen original
        label = new JLabel();
        label.setBounds(30, 30, 406, 231);
        
        scroll = new JScrollPane();
        scroll.setBounds(30, 30, 406, 231);
        scroll.setViewportView(label);
        this.add(scroll);
        
        //Blanco negro
        
        Olabel = new JLabel();
        Olabel.setBounds(620, 175, 406, 231);
        
        Oscroll = new JScrollPane();
        Oscroll.setBounds(620, 175, 406, 231);
        Oscroll.setViewportView(Olabel);
        this.add(Oscroll);
        
        //Bordes
        
        Flabel = new JLabel();
        Flabel.setBounds(30, 335, 406, 231);
        
        Fscroll = new JScrollPane();
        Fscroll.setBounds(30, 335, 406, 231);
        Fscroll.setViewportView(Flabel);
        this.add(Fscroll);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton XmenosY;
    private javax.swing.JButton XmenosYsobre2;
    private javax.swing.JButton YmenosXsobre2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    // End of variables declaration//GEN-END:variables
}
