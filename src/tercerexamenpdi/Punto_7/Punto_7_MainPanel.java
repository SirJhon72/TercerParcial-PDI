/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tercerexamenpdi.Punto_7;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Fer
 */
public class Punto_7_MainPanel extends javax.swing.JPanel {
    
    public boolean Eimagen1 = false;
    public boolean Eimagen2 = false;
    
    JLabel label, Olabel, Flabel, mascaraNlabel, mascaraBlabel;
    JScrollPane scroll, Oscroll, Fscroll, mascaraNscroll, mascaraBscroll;
    
    BufferedImage imagen = null;
    BufferedImage imagen2 = null;
    BufferedImage imagen3 = null;
    BufferedImage MarcoN = null;
    BufferedImage MarcoB = null;
    File imagenSeleccionada, imagensel2, imagensel3;
    Color arreglo[][], arregloNoMod[][], arregloFin[][], arregloMarcoN[][], arregloMarcoB[][];
    
    int contador = 0;

    /**
     * Creates new form Punto_7_MainPanel
     */
    public Punto_7_MainPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jButton1.setText("Cargar imagen 1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cargar imagen 2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Realizar montaje");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(864, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(173, 173, 173))
            .addGroup(layout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(267, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(148, 148, 148)
                .addComponent(jButton3)
                .addGap(102, 102, 102)
                .addComponent(jButton2)
                .addGap(64, 64, 64))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        double[] x = new double[256];
                if (contador == 1) {
                    JFileChooser Buscar = new JFileChooser();
                    FileNameExtensionFilter extension = new FileNameExtensionFilter("JPG &  BMP & PNG", "jpg", "bmp", "png");
                    Buscar.setFileFilter(extension);
                    int flag = Buscar.showOpenDialog(null);
                    //Comprobamos que pulse en aceptar
                    if (flag == JFileChooser.APPROVE_OPTION) {
                        try {
                            //Devuelve el fichero seleccionado
                            imagenSeleccionada = Buscar.getSelectedFile();
                            //Asignamos a la variable bmp la imagen leida
                            imagen = ImageIO.read(imagenSeleccionada);
                            imagen3 = ImageIO.read(imagenSeleccionada);
                            Eimagen1 = true;
                        } catch (IOException e) {

                        }
                        label.setIcon(new ImageIcon(imagen));
                        //Recorremos la imagen
                        //Se vacían los pixeles a un arreglo de Colores
                        arreglo = new Color[imagen.getHeight()][imagen.getWidth()];
                        for (int i = 0; i < imagen.getHeight(); i++) {
                            for (int j = 0; j < imagen.getWidth(); j++) {
                                arreglo[i][j] = new Color(imagen.getRGB(j, i));
                            }
                        }
                        for (int i = 0; i < 256; i++) {
                            x[i] = (double) i;
                        }
                    }
                } else {
                    contador = 1;
                    JFileChooser Buscar = new JFileChooser();
                    FileNameExtensionFilter extension = new FileNameExtensionFilter("JPG &  BMP & PNG", "jpg", "bmp", "png");
                    Buscar.setFileFilter(extension);
                    int flag = Buscar.showOpenDialog(null);
                    //Comprobamos que pulse en aceptar
                    if (flag == JFileChooser.APPROVE_OPTION) {
                        try {
                            //Devuelve el fichero seleccionado
                            imagenSeleccionada = Buscar.getSelectedFile();
                            //Asignamos a la variable bmp la imagen leida
                            imagen = ImageIO.read(imagenSeleccionada);
                            imagen3 = ImageIO.read(imagenSeleccionada);
                            Eimagen1 = true;
                        } catch (IOException e) {

                        }
                        label.setIcon(new ImageIcon(imagen));
                        //Recorremos la imagen
                        //Se vacían los pixeles a un arreglo de Colores
                        arreglo = new Color[imagen.getHeight()][imagen.getWidth()];
                        for (int i = 0; i < imagen.getHeight(); i++) {
                            for (int j = 0; j < imagen.getWidth(); j++) {
                                arreglo[i][j] = new Color(imagen.getRGB(j, i));
                            }
                        }
                        for (int i = 0; i < 256; i++) {
                            x[i] = (double) i;
                        }
                    }
                }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        double[] x = new double[256];
                if (contador == 1) {
                    JFileChooser Buscar = new JFileChooser();
                    FileNameExtensionFilter extension = new FileNameExtensionFilter("JPG &  BMP & PNG", "jpg", "bmp", "png");
                    Buscar.setFileFilter(extension);
                    int flag = Buscar.showOpenDialog(null);
                    //Comprobamos que pulse en aceptar
                    if (flag == JFileChooser.APPROVE_OPTION) {
                        try {
                            //Devuelve el fichero seleccionado
                            imagenSeleccionada = Buscar.getSelectedFile();
                            //Asignamos a la variable bmp la imagen leida
                            imagen2 = ImageIO.read(imagenSeleccionada);
                            Eimagen2 = true;
                        } catch (IOException e) {

                        }
                        Flabel.setIcon(new ImageIcon(imagen2));
                        //Recorremos la imagen
                        //Se vacían los pixeles a un arreglo de Colores
                        arregloNoMod = new Color[imagen2.getHeight()][imagen2.getWidth()];
                        for (int i = 0; i < imagen2.getHeight(); i++) {
                            for (int j = 0; j < imagen2.getWidth(); j++) {
                                arregloNoMod[i][j] = new Color(imagen2.getRGB(j, i));
                            }
                        }
                        for (int i = 0; i < 256; i++) {
                            x[i] = (double) i;
                        }
                    }
                } else {
                    contador = 1;
                    JFileChooser Buscar = new JFileChooser();
                    FileNameExtensionFilter extension = new FileNameExtensionFilter("JPG &  BMP & PNG", "jpg", "bmp", "png");
                    Buscar.setFileFilter(extension);
                    int flag = Buscar.showOpenDialog(null);
                    //Comprobamos que pulse en aceptar
                    if (flag == JFileChooser.APPROVE_OPTION) {
                        try {
                            //Devuelve el fichero seleccionado
                            imagenSeleccionada = Buscar.getSelectedFile();
                            //Asignamos a la variable bmp la imagen leida
                            imagen2 = ImageIO.read(imagenSeleccionada);
                            Eimagen2 = true;
                        } catch (IOException e) {

                        }
                        Flabel.setIcon(new ImageIcon(imagen2));
                        //Recorremos la imagen
                        //Se vacían los pixeles a un arreglo de Colores
                        arregloNoMod = new Color[imagen2.getHeight()][imagen2.getWidth()];
                        for (int i = 0; i < imagen2.getHeight(); i++) {
                            for (int j = 0; j < imagen2.getWidth(); j++) {
                                arregloNoMod[i][j] = new Color(imagen2.getRGB(j, i));
                            }
                        }
                        for (int i = 0; i < 256; i++) {
                            x[i] = (double) i;
                        }
                    }
                }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int Rojo1, Rojo2, azul1, azul2, verde1, verde2;
        double preRN, preRB, preVN, preVB, preAN, preAB;
        double Rojofin, verdefin, azulfin;
        int RojoMB, RojoMN, VerdeMB, VerdeMN, AzulMB, AzulMN;
        
        if(Eimagen1==false){
            JOptionPane.showMessageDialog(null, "Error: No ha seleccionado la 'Imagen 1'", "Error!", JOptionPane.ERROR_MESSAGE);
        }else{
            if(Eimagen2==false){
                JOptionPane.showMessageDialog(null, "Error: No ha seleccionado la 'Imagen 2'", "Error!", JOptionPane.ERROR_MESSAGE);
            }else{
                if(Eimagen1==true&&Eimagen2==true){
                    for (int i = 0; i < imagen.getHeight(); i++) {
                        for (int j = 0; j < imagen.getWidth(); j++) {
                            //Normales
                            Rojo1 = arreglo[i][j].getRed();
                            Rojo2 = arregloNoMod[i][j].getRed();
                            //Marcos
                            RojoMN = arregloMarcoN[i][j].getRed();//Rojo1*RojoMN
                            RojoMB = arregloMarcoB[i][j].getRed();//Rojo2*RojoMB
                            //subtotal
                            preRN = Rojo1*RojoMN/255;
                            preRB = Rojo2*RojoMB/255;
                            //total
                            Rojofin = preRN+preRB;
                            if(Rojofin>255)
                                Rojofin=255;
                            //Normales
                            azul1 = arreglo[i][j].getBlue();
                            azul2 = arregloNoMod[i][j].getBlue();
                            //Marcos
                            AzulMN = arregloMarcoN[i][j].getBlue();//azul1*AzulMN
                            AzulMB = arregloMarcoB[i][j].getBlue();//azul2*AzulMb
                            //subtotal
                            preAN=azul1*AzulMN/255;
                            preAB=azul2*AzulMB/255;
                            //total
                            azulfin = preAN+preAB;
                            if(azulfin>255)
                                azulfin=255;
                            //Normales
                            verde1 = arreglo[i][j].getGreen();
                            verde2 = arregloNoMod[i][j].getGreen();
                            //Marcos
                            VerdeMN = arregloMarcoN[i][j].getGreen();//verde1*VerdeMN
                            VerdeMB = arregloMarcoB[i][j].getGreen();//verde2*VerdeMB
                            //subtotal
                            preVN=verde1*VerdeMN /255;
                            preVB=verde2*VerdeMB/255;
                            //total
                            verdefin = preVN+preVB;
                            if(verdefin>255)
                                verdefin=255;
                            
                            Color col = new Color((int) Rojofin, (int) verdefin, (int) azulfin);
                            int rgb = col.getRGB();
                            imagen3.setRGB(j, i, rgb);
                        }
                    }
                    Olabel.setIcon(new ImageIcon(imagen3));
                }else{
                    if(Eimagen1==false||Eimagen2==false){
                        JOptionPane.showMessageDialog(null, "Error: Tiene que cargar ambas imagenes", "Error!", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    public void Todo (){
        //Mascara negra 
        mascaraNlabel = new JLabel();
        mascaraNlabel.setBounds(370, 30, 340, 231);
        
        mascaraNscroll = new JScrollPane();
        mascaraNscroll.setBounds(370, 30, 340, 231);
        mascaraNscroll.setViewportView(mascaraNlabel);
        this.add(mascaraNscroll);
        
        //Mascara blanca 
        
        mascaraBlabel = new JLabel();
        mascaraBlabel.setBounds(370, 335, 340, 231);
        
        mascaraBscroll = new JScrollPane();
        mascaraBscroll.setBounds(370, 335, 340, 231);
        mascaraBscroll.setViewportView(mascaraBlabel);
        this.add(mascaraBscroll);
        
        
        try {
            MarcoB = ImageIO.read(new File("Blanco.jpg"));
            mascaraBlabel.setIcon(new ImageIcon(MarcoB));
            arregloMarcoB = new Color[MarcoB.getHeight()][MarcoB.getWidth()];
            for (int i = 0; i < MarcoB.getHeight(); i++) {
                for (int j = 0; j < MarcoB.getWidth(); j++) {
                    arregloMarcoB[i][j] = new Color(MarcoB.getRGB(j,i));
                }
            }
        } catch (IOException e) {

        }
        
        try {
            MarcoN = ImageIO.read(new File("Negro.jpg"));
            mascaraNlabel.setIcon(new ImageIcon(MarcoN));
            arregloMarcoN = new Color[MarcoN.getHeight()][MarcoN.getWidth()];
            for (int i = 0; i < MarcoN.getHeight(); i++) {
                for (int j = 0; j < MarcoN.getWidth(); j++) {
                    arregloMarcoN[i][j] = new Color(MarcoN.getRGB(j, i));
                }
            }
        } catch (IOException e) {

        }
        
        //Imagen original
        label = new JLabel();
        label.setBounds(10, 30, 340, 231);
        
        scroll = new JScrollPane();
        scroll.setBounds(10, 30, 340, 231);
        scroll.setViewportView(label);
        this.add(scroll);
        
        //Blanco negro
        
        Olabel = new JLabel();
        Olabel.setBounds(725, 175, 406, 231);
        
        Oscroll = new JScrollPane();
        Oscroll.setBounds(725, 175, 406, 231);
        Oscroll.setViewportView(Olabel);
        this.add(Oscroll);
        
        //Bordes
        
        Flabel = new JLabel();
        Flabel.setBounds(10, 335, 340, 231);
        
        Fscroll = new JScrollPane();
        Fscroll.setBounds(10, 335, 340, 231);
        Fscroll.setViewportView(Flabel);
        this.add(Fscroll);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    // End of variables declaration//GEN-END:variables
}
